"""
- Розроблюваний програмний проєкт має складатися з окремих класів, що реалізують структури даних геш-таблиця та бінарне дерево пошуку, а також має містити окремий модуль, що забезпечує інтерфейсну взаємодію з користувачем для роботи зі створеними класами.
- Клас, що реалізує геш-таблицю, має дозволяти виконувати наступні операції на основі окремих методів: вставлення елементу, видалення елементу, пошук елементу, відображення структури геш-таблиці на основі використання параметрів, обраних у відповідності з варіантом індивідуального завдання
- Клас, що реалізує B-дерево, має дозволяти виконувати наступні операції на основі окремих методів: створення порожнього дерева, відображення структури дерева, пошук у дереві, вставлення ключа, видалення ключа.
- Розв’язати індивідуальне завдання з таблиці, що складається з 2 задач, наведених нижче, за допомогою розроблених модулів програмного забезпечення. 
- Створити геш-таблицю, що використовує метод ланцюжків для розв’язання колізій та геш-функцію множення. Геш-таблицю заповнити на основі виділення інформації з текстового файлу, в якому містяться прізвища, ім’я і по батькові співробітників фірми та займані ними посади. Ви значити посаду заданого співробітника.
- Мобільний оператор повинен мати інформацію про абонентів для забезпечення послуг. Кожний абонент характеризується номером, прізвищем, ім’ям, по батькові, тарифним планом. Сформувати дерево з відповідної інформації про абонентів, забезпечити пошук інформації про абонента за його телефонним номером та визначення кількості підключень за кожним з тарифів.
"""


class HashTable:
    def __init__(self):
        self.table = []

    def insert(self, element):
        pass

    def delete(self, element):
        pass

    def search(self, element):
        pass

    def show(self):
        pass


class BST:
    pass


class BTree(BST):
    def __init__(self):
        pass

    def createEmptyTree(self):
        pass

    def show(self):
        pass

    def search(self, element):
        pass

    def insert(self, element):
        pass

    def delete(self, element):
        pass


def main():
    pass


if __name__ == "__main__":
    main()
