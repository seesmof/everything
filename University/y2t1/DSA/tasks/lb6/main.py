"""
- –†–æ–∑—Ä–æ–±–∏—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–Ω–µ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è, –≤ —è–∫–æ–º—É —Ä–µ–∞–ª—ñ–∑—É—î—Ç—å—Å—è –∞–ª–≥–æ—Ä–∏—Ç–º–∏ –î–µ–π–∫—Å—Ç—Ä–∏, –§–ª–æ–π–¥–∞-–£–æ—Ä—à–µ–ª–ª–∞ —Ç–∞ –ë–µ–ª–ª–º–∞–Ω–∞-–§–æ—Ä–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å—Ç–≤–æ—Ä–µ–Ω–æ–≥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –∫–ª–∞—Å—É –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –≤—Å—ñ—Ö –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –æ–±—á–∏—Å–ª–µ–Ω—å, –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ (–≤ —Ç–æ–º—É —á–∏—Å–ª—ñ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –≥—Ä–∞—Ñ–∞) —Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤.
- –ü–µ—Ä–µ–ª—ñ–∫ –∑–∞–≤–¥–∞–Ω—å, —è–∫—ñ –º–∞—é—Ç—å –±—É—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω—ñ –≤ –ø—Ä–æ—Ü–µ—Å—ñ —Ä–æ–±–æ—Ç–∏ –Ω–∞–¥ –¥–µ—è–∫–∏–º –ø—Ä–æ—î–∫—Ç–æ–º –≥—Ä—É–ø–æ—é —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç—ñ–≤, —Ç–∞ —ó—Ö –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –≤–∏–∑–Ω–∞—á–∞—é—Ç—å—Å—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º. –ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–∑–Ω–∞—á–∞—î –∑–≤‚Äô—è–∑–æ–∫ –º—ñ–∂ –¥–∞–Ω–∏–º–∏ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏, –≤–∏–∑–Ω–∞—á–∞—é—á–∏ –∑–∞–≤–¥–∞–Ω–Ω—è, —è–∫—ñ –º–∞—é—Ç—å –∑–∞–≤–µ—Ä—à–∏—Ç–∏—Å—è –¥–æ –ø–æ—á–∞—Ç–∫—É –∫–æ–∂–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è. –í–∏–∑–Ω–∞—á–∏—Ç–∏ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ —á–∞—Å—É, —è–∫–∏–π –∑–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø—Ä–æ—î–∫—Ç—É.
- –ú–∞–ø–∞ –≤–∏–∑–Ω–∞—á–∞—î –∞–≤—Ç–æ–º–æ–±—ñ–ª—å–Ω—ñ —à–ª—è—Ö–∏ –¥–µ—è–∫–æ—ó —á–∞—Å—Ç–∏–Ω–∏ –º—ñ—Å—Ç–∞ –ó–∞–ø–æ—Ä—ñ–∂–∂—è. –î–µ—è–∫—ñ –≤—É–ª–∏—Ü—ñ –º–∞—é—Ç—å –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω—ñ–π —Ä—É—Ö, –∞ –Ω–∞ –¥–µ—è–∫–∏—Ö –º–æ–∂—É—Ç—å –∑—É—Å—Ç—Ä—ñ—á–∞—Ç–∏—Å—è –∑–∞—Ç–æ—Ä–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –¥–∞–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —Ç–∞ –≤—Ä–∞—Ö–æ–≤—É—é—á–∏ –æ–±–º–µ–∂–µ–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ –Ω–∞ –≤—É–ª–∏—Ü—è—Ö, –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏–π —à–ª—è—Ö, —è–∫–∏–º –º–æ–∂–Ω–∞ –¥—ñ—Å—Ç–∞—Ç–∏—Å—è –∑ –æ–¥–Ω—ñ—î—ó –∑–∞–¥–∞–Ω–æ—ó —Ç–æ—á–∫–∏ —É –ó–∞–ø–æ—Ä—ñ–∂–∂—ñ –¥–æ —ñ–Ω—à–æ—ó –≤ –∑–∞–¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç —á–∞—Å—É.
- –í–∏–∑–Ω–∞—á–∏—Ç–∏ –Ω–∞–π–∫–æ—Ä–æ—Ç—à—ñ —à–ª—è—Ö–∏ –º—ñ–∂ –≤—Å—ñ–º–∞ —Ç–æ—á–∫–∞–º–∏ –Ω–∞ –º–∞–ø—ñ –º—ñ—Å—Ç–∞ –ó–∞–ø–æ—Ä—ñ–∂–∂—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –æ–±–º–µ–∂–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è.
"""


GRAPH_FILE_PATH = "D:/code/everything/University/y2t1/DSA/tasks/lb6/input.txt"


def dijkstra():
    from collections import defaultdict, deque

    class Graph:
        def __init__(self, directed=False):
            self.graph = defaultdict(list)
            self.directed = directed

        def addEdge(self, u, v):
            self.graph[u].append(v)
            if not self.directed:
                self.graph[v].append(u)

        def BFS(self, start):
            visited = set()
            queue = deque([start])

            while queue:
                vertex = queue.popleft()
                if vertex not in visited:
                    visited.add(vertex)
                    queue.extend(set(self.graph[vertex]) - visited)

            return visited

        def displayTree(self, start):
            visited = set()
            queue = deque([start])
            tree = defaultdict(list)

            while queue:
                vertex = queue.popleft()
                if vertex not in visited:
                    visited.add(vertex)
                    for neighbor in self.graph[vertex]:
                        if neighbor not in visited:
                            tree[vertex].append(neighbor)
                            queue.append(neighbor)

            return tree

        def displayResults(self, start):
            visited = self.BFS(start)
            print(f"BFS traversal: {visited}")

        def displayGraph(self):
            for key, value in self.graph.items():
                print(f"{key} üîó {', '.join(map(str, value))}")

        def loadFromFile(self, filename):
            with open(filename, "r") as file:
                for line in file:
                    u, v = line.strip().split()
                    self.addEdge(int(u), int(v))

    def main():
        g = None
        while True:
            print("\nBFS")
            print("1. Create a new graph")
            print("2. Add an edge")
            print("3. Display graph")
            print("4. Perform breadth-first search")
            print("5. Display breadth-first search tree")
            print("6. Exit")
            choice = int(input(": "))
            print()

            if choice == 1:
                print("1. Load from file")
                print("2. Create a new graph")
                # choice = int(input(": "))
                choice = 1

                if choice == 1:
                    # filename = input("Enter the filename: ")
                    filename = GRAPH_FILE_PATH
                    g = Graph()
                    g.loadFromFile(filename)
                elif choice == 2:
                    directed = input("Is the graph directed? (y/n): ") == "y"
                    g = Graph(directed)

            elif choice == 2:
                u = int(input("Enter the first vertex: "))
                v = int(input("Enter the second vertex: "))
                g.addEdge(u, v)

            elif choice == 3:
                g.displayGraph()

            elif choice == 4:
                v = int(input("Enter the starting vertex: "))
                g.displayResults(v)

            elif choice == 5:
                v = int(input("Enter the starting vertex: "))
                print()
                tree = dict(g.displayTree(v))
                for key, value in tree.items():
                    print(f"{key}: {value}")

            else:
                break

    main()


def project_minimal_times():
    pass


def shortest_path_from_a_to_b():
    pass


def shortest_path_from_all_points():
    pass


def menu():
    while True:
        print("\nMake your choice")
        print("1. See Dijkstra, Floyd-Warshell or Bellman-Ford")
        print("2. Project minimal times")
        print("3. Shortest path from A to B")
        print("4. Shortest path from all points")
        print("5. Exit")
        choice = int(input(": "))

        if choice == 1:
            dijkstra()
        elif choice == 2:
            project_minimal_times()
        elif choice == 3:
            shortest_path_from_a_to_b()
        elif choice == 4:
            shortest_path_from_all_points()
        else:
            break


menu()
