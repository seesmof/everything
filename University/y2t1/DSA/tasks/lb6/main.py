"""
- –†–æ–∑—Ä–æ–±–∏—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–Ω–µ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è, –≤ —è–∫–æ–º—É —Ä–µ–∞–ª—ñ–∑—É—î—Ç—å—Å—è –∞–ª–≥–æ—Ä–∏—Ç–º–∏ –î–µ–π–∫—Å—Ç—Ä–∏, –§–ª–æ–π–¥–∞-–£–æ—Ä—à–µ–ª–ª–∞ —Ç–∞ –ë–µ–ª–ª–º–∞–Ω–∞-–§–æ—Ä–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å—Ç–≤–æ—Ä–µ–Ω–æ–≥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –∫–ª–∞—Å—É –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –≤—Å—ñ—Ö –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –æ–±—á–∏—Å–ª–µ–Ω—å, –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ (–≤ —Ç–æ–º—É —á–∏—Å–ª—ñ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –≥—Ä–∞—Ñ–∞) —Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤.
- –ü–µ—Ä–µ–ª—ñ–∫ –∑–∞–≤–¥–∞–Ω—å, —è–∫—ñ –º–∞—é—Ç—å –±—É—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω—ñ –≤ –ø—Ä–æ—Ü–µ—Å—ñ —Ä–æ–±–æ—Ç–∏ –Ω–∞–¥ –¥–µ—è–∫–∏–º –ø—Ä–æ—î–∫—Ç–æ–º –≥—Ä—É–ø–æ—é —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç—ñ–≤, —Ç–∞ —ó—Ö –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –≤–∏–∑–Ω–∞—á–∞—é—Ç—å—Å—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º. –ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–∑–Ω–∞—á–∞—î –∑–≤‚Äô—è–∑–æ–∫ –º—ñ–∂ –¥–∞–Ω–∏–º–∏ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏, –≤–∏–∑–Ω–∞—á–∞—é—á–∏ –∑–∞–≤–¥–∞–Ω–Ω—è, —è–∫—ñ –º–∞—é—Ç—å –∑–∞–≤–µ—Ä—à–∏—Ç–∏—Å—è –¥–æ –ø–æ—á–∞—Ç–∫—É –∫–æ–∂–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è. –í–∏–∑–Ω–∞—á–∏—Ç–∏ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ —á–∞—Å—É, —è–∫–∏–π –∑–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø—Ä–æ—î–∫—Ç—É.
- –ú–∞–ø–∞ –≤–∏–∑–Ω–∞—á–∞—î –∞–≤—Ç–æ–º–æ–±—ñ–ª—å–Ω—ñ —à–ª—è—Ö–∏ –¥–µ—è–∫–æ—ó —á–∞—Å—Ç–∏–Ω–∏ –º—ñ—Å—Ç–∞ –ó–∞–ø–æ—Ä—ñ–∂–∂—è. –î–µ—è–∫—ñ –≤—É–ª–∏—Ü—ñ –º–∞—é—Ç—å –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω—ñ–π —Ä—É—Ö, –∞ –Ω–∞ –¥–µ—è–∫–∏—Ö –º–æ–∂—É—Ç—å –∑—É—Å—Ç—Ä—ñ—á–∞—Ç–∏—Å—è –∑–∞—Ç–æ—Ä–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –¥–∞–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —Ç–∞ –≤—Ä–∞—Ö–æ–≤—É—é—á–∏ –æ–±–º–µ–∂–µ–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ –Ω–∞ –≤—É–ª–∏—Ü—è—Ö, –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏–π —à–ª—è—Ö, —è–∫–∏–º –º–æ–∂–Ω–∞ –¥—ñ—Å—Ç–∞—Ç–∏—Å—è –∑ –æ–¥–Ω—ñ—î—ó –∑–∞–¥–∞–Ω–æ—ó —Ç–æ—á–∫–∏ —É –ó–∞–ø–æ—Ä—ñ–∂–∂—ñ –¥–æ —ñ–Ω—à–æ—ó –≤ –∑–∞–¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç —á–∞—Å—É.
- –í–∏–∑–Ω–∞—á–∏—Ç–∏ –Ω–∞–π–∫–æ—Ä–æ—Ç—à—ñ —à–ª—è—Ö–∏ –º—ñ–∂ –≤—Å—ñ–º–∞ —Ç–æ—á–∫–∞–º–∏ –Ω–∞ –º–∞–ø—ñ –º—ñ—Å—Ç–∞ –ó–∞–ø–æ—Ä—ñ–∂–∂—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –æ–±–º–µ–∂–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è.
"""

GRAPH_FILE_PATH = "D:/code/everything/University/y2t1/DSA/tasks/lb6/input.txt"


def dijkstra():
    import networkx as nx

    class Graph:
        def __init__(self, directed=False):
            self.graph = nx.Graph() if not directed else nx.DiGraph()
            self.directed = directed

        def addEdge(self, u, v, w):
            if not self.graph.has_node(u):
                self.graph.add_node(u)
            if not self.graph.has_node(v):
                self.graph.add_node(v)
            self.graph.add_edge(u, v, weight=w)
            if not self.directed:
                self.graph.add_edge(v, u, weight=w)

        def loadFromFile(self, filename):
            with open(filename, "r") as file:
                for line in file:
                    u, v, w = line.strip().split()
                    self.addEdge(int(u), int(v), int(w))

        def displayGraph(self):
            print("Nodes:")
            for node in self.graph.nodes():
                print(node)
            print("\nEdges:")
            for u, v, data in self.graph.edges(data=True):
                print(f"{u} üîó {v} - {data['weight']}")

        def dijkstra(self, start):
            n = len(self.graph)
            dist = [sys.maxsize] * n
            dist[start] = 0
            queue = [start]
            while queue:
                u = min(queue, key=lambda x: dist[x])
                queue.remove(u)
                for v, w in self.graph[u].items():
                    if dist[u] + w["weight"] < dist[v]:
                        dist[v] = dist[u] + w["weight"]
            return dist

        def floyed_warshall(self):
            n = len(self.graph)
            dist = [[sys.maxsize] * n for _ in range(n)]
            for i in range(n):
                for j in range(n):
                    if i == j:
                        dist[i][j] = 0
                    elif self.graph[i][j] != 0:
                        dist[i][j] = self.graph[i][j]
            for k in range(n):
                for i in range(n):
                    for j in range(n):
                        dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])
            return dist

        def bellman_ford(self, start):
            n = len(self.graph)
            dist = [sys.maxsize] * n
            dist[start] = 0
            for _ in range(n - 1):
                for u in range(n):
                    for v, w in self.graph[u].items():
                        if dist[u] + w["weight"] < dist[v]:
                            dist[v] = dist[u] + w["weight"]
            return dist

    def main():
        g = None
        while True:
            print("\nAlgorithms")
            print("1. Create graph")
            print("2. Add edge")
            print("3. Display graph")
            print("4. Dijkstra")
            print("5. Floyd-Warshell")
            print("6. Bellman-Ford")
            print("7. Exit")
            choice = int(input(": "))
            print()

            if choice == 1:
                print("1. Load from file")
                print("2. Create a new graph")
                # choice = int(input(": "))
                choice = 1
                print()

                if choice == 1:
                    # filename = input("Enter filename: ")
                    filename = GRAPH_FILE_PATH
                    g = Graph()
                    g.loadFromFile(filename)
                elif choice == 2:
                    directed = input("Is the graph directed? (y/n): ") == "y"
                    g = Graph(directed)

            elif choice == 2:
                u = input("Enter first vertex: ")
                v = input("Enter second vertex: ")
                w = int(input("Enter weight: "))
                g.addEdge(u, v, w)

            elif choice == 3:
                g.displayGraph()

            elif choice == 4:
                start = int(input("Enter start vertex: "))
                g.dijkstra(start)

            elif choice == 5:
                g.floyd_warshell()

            elif choice == 6:
                start = int(input("Enter start vertex: "))
                g.bellman_ford(start)

            else:
                break

    main()


def project_minimal_times():
    pass


def shortest_path_from_a_to_b():
    pass


def shortest_path_from_all_points():
    pass


def menu():
    while True:
        print("\nMake your choice")
        print("1. See Dijkstra, Floyd-Warshell or Bellman-Ford")
        print("2. Project minimal times")
        print("3. Shortest path from A to B")
        print("4. Shortest path from all points")
        print("5. Exit")
        choice = int(input(": "))

        if choice == 1:
            dijkstra()
        elif choice == 2:
            project_minimal_times()
        elif choice == 3:
            shortest_path_from_a_to_b()
        elif choice == 4:
            shortest_path_from_all_points()
        else:
            break


menu()
